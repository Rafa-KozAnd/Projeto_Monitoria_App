// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


    // const monitorias = await client.$queryRaw`
    //                     SELECT 
    //                         * 
    //                     FROM 
    //                         "Monitoria" m
    //                     JOIN
    //                         "Disciplina" d ON d."" == m.codigo_disciplina
    //                     JOIN
    //                         "AlunoMonitoria am ON am."id_monitoria" == m."id"
    //                     WHERE 
    //                         matricula = ${matricula}`


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aluno {
  matricula          String              @id
  nome               String
  senha              String 
  email              String
  telefone           String
  e_monitor          Boolean
  AlunoMonitoria     AlunoMonitoria[]
  VagaAlunoMonitoria VagaAlunoMonitoria[]
  Agendamento        Agendamento[]
  SolicitacaoMonitoria SolicitacaoMonitoria[]
}

model SolicitacaoAgendamento {
  matriculaAluno    String              @id // FK
  dataSolicitacao   DateTime
  agendamento       String  // FK
  id_monitoria      String // FK
}

model Agendamento {
  id              Int    @id
  agendamento     String
  Aluno           Aluno    @relation(fields:[matricula_aluno], references:[matricula])
  matricula_aluno String
  Monitoria       Monitoria @relation(fields:[id_monitoria], references:[id])
  id_monitoria    Int // FK
  horario         DateTime
}
model AlunoMonitoria {
  id               Int       @id
  Aluno            Aluno     @relation(fields: [matricula_aluno], references: [matricula])
  matricula_aluno String
  Monitoria        Monitoria @relation(fields: [id_monitoria], references: [id])
  id_monitoria     Int
}

model Colaborador {
  cpf           String          @id
  nome          String
  email         String
  senha         String
  role          Role
  Monitoria     Monitoria[]
  Disciplina    Disciplina[]
  VagaMonitoria VagaMonitoria[]
}



model colaboradorFuncao {
  id             String @id
  id_colaborador String //FK
  idFuncao       String //FK
}

model funcao {
  id   Int    @id
  nome String @unique
}

model Monitoria {
  id                Int              @id
  Disciplina        Disciplina       @relation(fields: [codigo_disciplina], references: [codigo_disciplina])
  codigo_disciplina String
  nome_disciplina   String
  Colaborador       Colaborador      @relation(fields: [codigo_professor], references: [cpf])
  codigo_professor  String
  horario           DateTime
  AlunoMonitoria     AlunoMonitoria[]
  VagaMonitoria     VagaMonitoria[]
  Agendamento       Agendamento[]
}

model Disciplina {
  codigo_disciplina    String      @id
  Colaborador          Colaborador @relation(fields: [professor_disciplina], references: [cpf])
  professor_disciplina String
  nome                 String
  Monitoria            Monitoria[]
  VagaMonitoria        VagaMonitoria[]
  SolicitacaoMonitoria SolicitacaoMonitoria[]
}

model VagaMonitoria {
  id                     Int                  @id @default(autoincrement())
  Colaborador            Colaborador          @relation(fields: [professor_requisitante], references: [cpf])
  professor_requisitante String
  Monitoria              Monitoria            @relation(fields: [id_monitoria], references: [id])
  id_monitoria           Int             
  Disciplina             Disciplina           @relation(fields: [codigo_disciplina], references: [codigo_disciplina])
  codigo_disciplina      String
  monitoria              Int
  aprovado               Boolean // Creio que esse campo não sera necessario
  VagaAlunoMonitoria     VagaAlunoMonitoria[]
  pre_requisito          String
}

model VagaAlunoMonitoria {
  Aluno           Aluno         @relation(fields: [matricula_aluno], references: [matricula])
  matricula_aluno String        
  VagaMonitoria   VagaMonitoria @relation(fields: [id_vaga], references: [id])
  id_vaga         Int           
  status          Int           @default(0)
  motivo          String?        
  @@unique([matricula_aluno,id_vaga])
}

model SolicitacaoMonitoria {
  id                    Int           @id @default(autoincrement())
  Disciplina            Disciplina   @relation(fields: [codigo_disciplina], references: [codigo_disciplina])
  codigo_disciplina     String
  motivo                String
  status                Int    // 1 ou 2 talvez não precise.. avaliar
  monitorRecomendado    String
  AlunoSolicitante      Aluno        @relation(fields: [matricula_aluno], references: [matricula])
  matricula_aluno       String
}

enum Role {
  Professor
  Coordenador
  ProfessorCoordenador
}